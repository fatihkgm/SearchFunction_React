{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search_box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","people","id","name","email","CardList","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredPeople","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAGaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACA,qBAAKA,UAAU,MAAMC,IAAI,SAASC,IAAG,oBAAeH,EAAMI,OAAOC,GAA5B,UACnC,6BAAKL,EAAMI,OAAOE,OAClB,4BAAIN,EAAMI,OAAOG,YCHRC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMI,OAAOK,KAAI,SAACL,GAAD,OAChB,cAAC,EAAD,CAAsBA,OAAQA,GAAnBA,EAAOC,UCJbK,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEX,UAAU,SACVY,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCCG,G,wDArCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXjB,OAAQ,GACRc,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAACC,GAAD,OACvDA,EAASC,OAAOF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEb,OAAQsB,Y,oBAQ5D,WAAU,IAAD,EACyBC,KAAKN,MAA7BjB,EADD,EACCA,OAAQc,EADT,EACSA,YACVU,EAAiBxB,EAAOyB,QAAO,SAACzB,GAAD,OACnCA,EAAOE,KAAKwB,cAAcC,SAASb,EAAYY,kBAEjD,OACE,sBAAK7B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEU,YAAY,eACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUR,OAAQwB,W,GAhCRI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.740dab68.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.style.css\";\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n  <img className=\"img\" alt=\"people\" src={`../images/${props.people.id}.png`}/>\n    <h2>{props.people.name}</h2>\n    <p>{props.people.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list.style.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.people.map((people) => (\n        <Card key={people.id} people={people} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./search_style.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n","import React, { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search_box/search-box.component\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      people: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then((response) =>\n      response.json().then((users) => this.setState({ people: users }))\n    );\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { people, searchField } = this.state;\n    const filteredPeople = people.filter((people) =>\n      people.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Find Your Model</h1>\n        <SearchBox\n          placeholder=\"Seach People\"\n          handleChange={this.handleChange}\n        />\n        <CardList people={filteredPeople}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}